=GOAL (MVP)=
The minimum viable product for Sepia Journal is:
- a .NET backend
- MongoDB hosted in cloud
- a frontend with React/Tailwind
- basic authentication and account login
- hosted with AWS
- the user can log in and post journal entries. These journal entries are automatically dated, up to 5000 characters each, and the user can read then in a successive feed. The user's page can also be shared publicly with others - people can freely read it without logging in. (The URL slug format is probably www.journalsite.com/username/journal-entry-random-gen-code.)

=HIGH-LEVEL STEPS=
- Set up minimal .NET backend with basic frontend Hello World that can go online right away.
- Attach it to AWS instance and maybe set up a free basic domain with it for now. Make sure it can be accessed online.
- Attach MongoDB to it and test with data.
- Set up basic auth/account login and track it with DB.
- Build up ability to post journal entries that are dated.
- Create ability to view a user's public journal feed of entries.

**********

Start with an integreation test for the walking skeleton:

-user visits website (hosted on the cloud)
-user logs in
-user is able to successfully authenticate with password
-sees a list of his recent dated journal entries in an organized feed, from most to least recent
-he clicks New Post and gets taken to a new screen to post
-he writes a quick entry and clicks Post
-he gets taken back to his feed; the new post is in the list now, showing up at the top and dated most recent
-he wants to share this with someone, so he grabs the URL of his journal page
-he posts it elsewhere and someone else opens it up in a different browser
-the reader doesn't need to log in, they're taken to the feed and can read them in order; but doesn't have the option to make a new post

**********

1/19
PUBLIC FEED: accessible through sepiajournal.site/[userID]. userID = user's name. Grabs the public posts and renders them. No New Post button, you need to be logged in. But this state is all it does.

ON LOGIN: state grabs the user information for the logged in user. Can still access public feeds, but in the nav bar, the New Post option shows up.New Post takes to exclusive new post page, adds post as normal wshich requires user login credentials to do so. My Feed button goes to logged in user's specific feed, can still go to profile public feed. Loggin in allows more Navbar options and what the user can do.

NEW POST: only makes posts for users that are logged in, verifying by the state login criteria.

How to handle state?

<PublicFeed>: when this loads, it takes the URL slug, polls the DB, then returns that user's posts. (if unable to do so, it returns a generic error. But a bad URL enters a generic 404 to begin with.) It would only get that user's public posts. Get state within this component.

<LoggedInFeed> a user's personal feed when logged in. This grabs state and other user info when logged in and bleeds in here, but it checks for login first. This probably needs state from the top-down App.

FOR TRACER BULLET: stick with public feed states and post first

1/22
App gets overall state: needs to bleed down to appropriate Routes
1. get rid of AppRoutes object and hardcode
2. figure out how to dump into the AppRoutes map

1/23
For first version: NewPost directly updates the PublicFeed state.
In the future, it hits the DB and adds it there and PublicFeed is pulling from that instead.

Deciding to use state context to help with the React Router side.
1. Set the context in a seperate file (in the future, this'll consume maybe from the controller)
2. The relevant components must then use this context.
3. App.js sends down state and effects as context.
4. PublicFeed and NewPost also consume this context that's sent down in order to do things.

1/27
We essentially now have a very, very basic walking skeleton. Next thing to do is to upload this version onto AWS. Then, we can start to develop the actual DB for authentication and storing posts.

https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/deployment-beanstalk-traditional.html

2/19
After a disasterous attempt to get Auth0 to work with this application that broke the app, I rolled back to the last known working version and will go forward from there. I'll look into a new way to support login authentication.